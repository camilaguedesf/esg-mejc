from pptx import Presentation
from pptx.util import Inches, Pt
from pptx.dml.color import RGBColor
from pptx.enum.text import PP_ALIGN
from pptx.enum.shapes import MSO_SHAPE

def create_anuidades_presentation():
    """
    Cria uma apresenta√ß√£o completa sobre Rendas Certas ou Anuidades
    """
    # Criar apresenta√ß√£o
    prs = Presentation()
    
    # Definir cores do tema
    primary_color = RGBColor(102, 126, 234)  # Azul principal
    secondary_color = RGBColor(118, 75, 162)  # Roxo
    accent_color = RGBColor(76, 175, 80)      # Verde para resultados
    
    def add_title_slide():
        """Slide 1: T√≠tulo da apresenta√ß√£o"""
        slide_layout = prs.slide_layouts[0]  # Layout t√≠tulo
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        subtitle = slide.placeholders[1]
        
        title.text = "Rendas Certas ou Anuidades"
        title.text_frame.paragraphs[0].font.size = Pt(44)
        title.text_frame.paragraphs[0].font.color.rgb = primary_color
        
        subtitle.text = "Exerc√≠cios Resolvidos - Cap√≠tulo 5\nMatem√°tica Financeira"
        subtitle.text_frame.paragraphs[0].font.size = Pt(24)
        subtitle.text_frame.paragraphs[1].font.size = Pt(20)
        
        # Adicionar elementos visuais
        left = Inches(0.5)
        top = Inches(6)
        width = Inches(9)
        height = Inches(1)
        
        textbox = slide.shapes.add_textbox(left, top, width, height)
        text_frame = textbox.text_frame
        p = text_frame.paragraphs[0]
        p.text = "üìä Conceitos ‚Ä¢ üìê F√≥rmulas ‚Ä¢ üìã Exerc√≠cios Pr√°ticos"
        p.font.size = Pt(18)
        p.font.color.rgb = secondary_color
        p.alignment = PP_ALIGN.CENTER
    
    def add_concepts_slide():
        """Slide 2: Conceitos fundamentais"""
        slide_layout = prs.slide_layouts[1]  # Layout t√≠tulo e conte√∫do
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        title.text = "Conceitos Fundamentais"
        title.text_frame.paragraphs[0].font.color.rgb = primary_color
        
        # Conte√∫do principal
        content = slide.placeholders[1]
        content.text = """Anuidades s√£o s√©ries de pagamentos ou recebimentos iguais, realizados em intervalos regulares de tempo, com uma taxa de juros constante.

Tipos principais:

‚Ä¢ Anuidade Postecipada
  Pagamentos no final de cada per√≠odo

‚Ä¢ Anuidade Antecipada  
  Pagamentos no in√≠cio de cada per√≠odo

‚Ä¢ Anuidade Perp√©tua
  S√©rie infinita de pagamentos

‚Ä¢ Valor Presente vs Valor Futuro
  VP: valor atual da s√©rie
  VF: montante acumulado"""
        
        # Formata√ß√£o do texto
        for paragraph in content.text_frame.paragraphs:
            paragraph.font.size = Pt(18)
            if "‚Ä¢" in paragraph.text:
                paragraph.font.color.rgb = secondary_color
    
    def add_formulas_slide():
        """Slide 3: F√≥rmulas principais"""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        title = slide.shapes.title
        title.text = "F√≥rmulas Principais"
        title.text_frame.paragraphs[0].font.color.rgb = primary_color
        
        # Adicionar caixas de f√≥rmulas
        formulas = [
            ("Valor Presente - Postecipada", "P = R √ó [(1-(1+i)^-n)/i]"),
            ("Valor Futuro - Postecipada", "S = R √ó [((1+i)^n-1)/i]"),
            ("Valor Presente - Antecipada", "P = R √ó [(1-(1+i)^-n)/i] √ó (1+i)"),
            ("Anuidade Perp√©tua", "P = R / i")
        ]
        
        y_positions = [1.5, 2.8, 4.1, 5.4]
        
        for i, (desc, formula) in enumerate(formulas):
            # Descri√ß√£o
            left = Inches(0.5)
            top = Inches(y_positions[i])
            width = Inches(4)
            height = Inches(0.5)
            
            desc_box = slide.shapes.add_textbox(left, top, width, height)
            desc_frame = desc_box.text_frame
            desc_p = desc_frame.paragraphs[0]
            desc_p.text = desc
            desc_p.font.size = Pt(16)
            desc_p.font.bold = True
            desc_p.font.color.rgb = secondary_color
            
            # F√≥rmula
            left = Inches(5)
            formula_box = slide.shapes.add_textbox(left, top, width, height)
            formula_frame = formula_box.text_frame
            formula_p = formula_frame.paragraphs[0]
            formula_p.text = formula
            formula_p.font.size = Pt(18)
            formula_p.font.name = "Courier New"
            formula_p.font.color.rgb = primary_color
        
        # Legenda
        left = Inches(0.5)
        top = Inches(6.5)
        width = Inches(9)
        height = Inches(0.8)
        
        legend_box = slide.shapes.add_textbox(left, top, width, height)
        legend_frame = legend_box.text_frame
        legend_p = legend_frame.paragraphs[0]
        legend_p.text = "Legenda: P=Valor Presente | S=Valor Futuro | R=Presta√ß√£o | i=Taxa | n=Per√≠odos"
        legend_p.font.size = Pt(14)
        legend_p.font.italic = True
        legend_p.alignment = PP_ALIGN.CENTER
    
    def add_exercise_slide(ex_num, title, problem, data, formula, calculations, result):
        """Template para slides de exerc√≠cios"""
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        
        # T√≠tulo
        slide_title = slide.shapes.title
        slide_title.text = f"Exerc√≠cio {ex_num}: {title}"
        slide_title.text_frame.paragraphs[0].font.color.rgb = primary_color
        
        # Problema
        left = Inches(0.5)
        top = Inches(1.5)
        width = Inches(9)
        height = Inches(1)
        
        problem_box = slide.shapes.add_textbox(left, top, width, height)
        problem_frame = problem_box.text_frame
        problem_p = problem_frame.paragraphs[0]
        problem_p.text = f"üìã Problema: {problem}"
        problem_p.font.size = Pt(16)
        problem_p.font.color.rgb = RGBColor(51, 51, 51)
        
        # Dados
        top = Inches(2.7)
        height = Inches(0.8)
        
        data_box = slide.shapes.add_textbox(left, top, width, height)
        data_frame = data_box.text_frame
        data_p = data_frame.paragraphs[0]
        data_p.text = f"üìä Dados: {data}"
        data_p.font.size = Pt(14)
        
        # F√≥rmula
        top = Inches(3.7)
        height = Inches(0.5)
        
        formula_box = slide.shapes.add_textbox(left, top, width, height)
        formula_frame = formula_box.text_frame
        formula_p = formula_frame.paragraphs[0]
        formula_p.text = f"üìê F√≥rmula: {formula}"
        formula_p.font.size = Pt(16)
        formula_p.font.name = "Courier New"
        formula_p.font.color.rgb = primary_color
        formula_p.alignment = PP_ALIGN.CENTER
        
        # C√°lculos
        top = Inches(4.5)
        height = Inches(1.5)
        
        calc_box = slide.shapes.add_textbox(left, top, width, height)
        calc_frame = calc_box.text_frame
        calc_p = calc_frame.paragraphs[0]
        calc_p.text = f"üî¢ Resolu√ß√£o:\n{calculations}"
        calc_p.font.size = Pt(14)
        calc_p.font.name = "Courier New"
        
        # Resultado
        top = Inches(6.2)
        height = Inches(0.6)
        
        result_box = slide.shapes.add_textbox(left, top, width, height)
        result_frame = result_box.text_frame
        result_p = result_frame.paragraphs[0]
        result_p.text = f"üí∞ {result}"
        result_p.font.size = Pt(18)
        result_p.font.bold = True
        result_p.font.color.rgb = accent_color
        result_p.alignment = PP_ALIGN.CENTER
    
    # Criar todos os slides
    add_title_slide()
    add_concepts_slide()
    add_formulas_slide()
    
    # Exerc√≠cio 1
    add_exercise_slide(
        1, "Valor atual de anuidade postecipada",
        "Uma anuidade postecipada de 6 parcelas mensais de R$ 500,00 com juros de 2% a.m. Qual o valor atual?",
        "R = R$ 500,00 | i = 2% a.m. = 0,02 | n = 6 meses",
        "P = R √ó [(1-(1+i)^-n)/i]",
        "P = 500 √ó [(1-(1+0,02)^-6)/0,02]\nP = 500 √ó [(1-0,8880)/0,02]\nP = 500 √ó 5,601",
        "Valor Atual = R$ 2.800,50"
    )
    
    # Exerc√≠cio 2
    add_exercise_slide(
        2, "Valor futuro de uma anuidade",
        "Uma pessoa deposita R$ 300,00 por m√™s durante 12 meses a 1,5% a.m. Qual o montante acumulado?",
        "R = R$ 300,00 | i = 1,5% a.m. = 0,015 | n = 12 meses",
        "S = R √ó [((1+i)^n-1)/i]",
        "S = 300 √ó [((1,015)^12-1)/0,015]\nS = 300 √ó [(1,1956-1)/0,015]\nS = 300 √ó 13,042",
        "Montante Acumulado = R$ 3.912,60"
    )
    
    # Exerc√≠cio 3
    add_exercise_slide(
        3, "Calcular n√∫mero de per√≠odos",
        "Uma anuidade postecipada de R$ 1.000,00 gera um valor futuro de R$ 12.000,00 a 1,5% a.m. Quantas parcelas?",
        "R = R$ 1.000,00 | S = R$ 12.000,00 | i = 1,5% a.m. = 0,015",
        "(1,015)^n = 1 + (S√ói/R)",
        "12.000 = 1.000 √ó [((1,015)^n-1)/0,015]\n(1,015)^n = 1,18\nn = log(1,18)/log(1,015)",
        "N√∫mero de Parcelas ‚âà 11,2 meses"
    )
    
    # Exerc√≠cio 4
    add_exercise_slide(
        4, "Determinar a presta√ß√£o",
        "Um bem custa R$ 10.000,00 e ser√° pago em 8 presta√ß√µes mensais a 2% a.m. Qual o valor de cada presta√ß√£o?",
        "P = R$ 10.000,00 | i = 2% a.m. = 0,02 | n = 8 meses",
        "R = P / [(1-(1+i)^-n)/i]",
        "R = 10.000 / [(1-(1,02)^-8)/0,02]\nR = 10.000 / 7,3255",
        "Valor da Presta√ß√£o = R$ 1.364,72"
    )
    
    # Exerc√≠cio 5
    add_exercise_slide(
        5, "Valor atual de anuidade antecipada",
        "5 parcelas de R$ 600,00 s√£o pagas no in√≠cio de cada m√™s a 1,5% a.m. Qual o valor atual?",
        "R = R$ 600,00 | i = 1,5% a.m. = 0,015 | n = 5 meses",
        "P = R √ó [(1-(1+i)^-n)/i] √ó (1+i)",
        "Fator postecipada = 4,7826\nP = 600 √ó 4,7826 √ó 1,015",
        "Valor Atual = R$ 2.912,58"
    )
    
    # Exerc√≠cio 6
    add_exercise_slide(
        6, "Valor de entrada em compra parcelada",
        "Um aparelho custa R$ 5.000,00, com entrada de R$ 1.000,00 e 4 parcelas de R$ 1.100,00 a 2% a.m. Qual o valor √† vista?",
        "Entrada = R$ 1.000,00 | R = R$ 1.100,00 | i = 2% a.m. | n = 4",
        "Valor √† vista = Entrada + VP das parcelas",
        "VP parcelas = 1.100 √ó 3,8077 = 4.188,47\nValor √† vista = 1.000 + 4.188,47",
        "Valor √† Vista = R$ 5.188,47"
    )
    
    # Exerc√≠cio 7
    add_exercise_slide(
        7, "Anuidade com valor presente conhecido",
        "Uma aplica√ß√£o de R$ 3.000,00 resulta em 6 parcelas mensais iguais. Taxa: 1,5% a.m. Qual o valor da presta√ß√£o?",
        "P = R$ 3.000,00 | i = 1,5% a.m. = 0,015 | n = 6 meses",
        "R = P / [(1-(1+i)^-n)/i]",
        "R = 3.000 / [(1-(1,015)^-6)/0,015]\nR = 3.000 / 5,7014",
        "Valor da Presta√ß√£o = R$ 526,16"
    )
    
    # Exerc√≠cio 8
    add_exercise_slide(
        8, "Valor futuro de anuidade antecipada",
        "Um dep√≥sito de R$ 400,00 feito no in√≠cio de cada m√™s durante 10 meses a 1,5% a.m. Qual o montante?",
        "R = R$ 400,00 | i = 1,5% a.m. = 0,015 | n = 10 meses",
        "S = R √ó [((1+i)^n-1)/i] √ó (1+i)",
        "Fator postecipada = 10,7027\nS = 400 √ó 10,7027 √ó 1,015",
        "Montante = R$ 4.345,28"
    )
    
    # Exerc√≠cio 9
    add_exercise_slide(
        9, "Anuidade perp√©tua",
        "Qual o valor atual de uma renda perp√©tua de R$ 800,00 mensais com taxa de 2% a.m.?",
        "R = R$ 800,00 | i = 2% a.m. = 0,02",
        "P = R / i",
        "P = 800 / 0,02\nP = 40.000",
        "Valor Atual = R$ 40.000,00"
    )
    
    # Exerc√≠cio 10
    add_exercise_slide(
        10, "Diferen√ßa entre anuidade antecipada e postecipada",
        "Calcule a diferen√ßa no VP entre 5 parcelas de R$ 700,00 em anuidade antecipada e postecipada a 2% a.m.",
        "R = R$ 700,00 | i = 2% a.m. = 0,02 | n = 5 parcelas",
        "Diferen√ßa = VP_antecipada - VP_postecipada",
        "VP_postecipada = 700 √ó 4,7135 = 3.299,45\nVP_antecipada = 3.299,45 √ó 1,02 = 3.365,44",
        "Diferen√ßa = R$ 65,99"
    )
    
    # Slide final - Resumo
    slide_layout = prs.slide_layouts[1]
    slide = prs.slides.add_slide(slide_layout)
    
    title = slide.shapes.title
    title.text = "Resumo e Conclus√µes"
    title.text_frame.paragraphs[0].font.color.rgb = primary_color
    
    content = slide.placeholders[1]
    content.text = """Pontos-chave aprendidos:

‚úÖ Anuidade postecipada vs antecipada
   ‚Ä¢ Antecipada sempre tem VP maior

‚úÖ F√≥rmulas fundamentais dominadas
   ‚Ä¢ Valor presente e futuro
   ‚Ä¢ C√°lculo de presta√ß√µes e per√≠odos

‚úÖ Aplica√ß√µes pr√°ticas
   ‚Ä¢ Financiamentos
   ‚Ä¢ Investimentos
   ‚Ä¢ Aposentadoria

üìö Pr√≥ximos passos:
   ‚Ä¢ Praticar com diferentes cen√°rios
   ‚Ä¢ Aplicar em casos reais
   ‚Ä¢ Estudar sistemas de amortiza√ß√£o"""
    
    for paragraph in content.text_frame.paragraphs:
        paragraph.font.size = Pt(16)
        if "‚úÖ" in paragraph.text or "üìö" in paragraph.text:
            paragraph.font.color.rgb = accent_color
    
    return prs

def save_presentation():
    """Salva a apresenta√ß√£o"""
    prs = create_anuidades_presentation()
    filename = "Anuidades_Exercicios_Resolvidos.pptx"
    prs.save(filename)
    print(f"‚úÖ Apresenta√ß√£o salva como: {filename}")
    print(f"üìä Total de slides: {len(prs.slides)}")
    print("\nüìã Conte√∫do da apresenta√ß√£o:")
    print("‚Ä¢ Slide 1: T√≠tulo e introdu√ß√£o")
    print("‚Ä¢ Slide 2: Conceitos fundamentais") 
    print("‚Ä¢ Slide 3: F√≥rmulas principais")
    print("‚Ä¢ Slides 4-13: Exerc√≠cios 1-10 resolvidos")
    print("‚Ä¢ Slide 14: Resumo e conclus√µes")
    print("\nüéØ Dicas para apresenta√ß√£o:")
    print("‚Ä¢ Use o modo apresentador")
    print("‚Ä¢ Prepare exemplos extras")
    print("‚Ä¢ Tenha calculadora √† m√£o")
    print("‚Ä¢ Permita perguntas entre exerc√≠cios")

if __name__ == "__main__":
    # Verificar se a biblioteca est√° instalada
    try:
        from pptx import Presentation
        save_presentation()
    except ImportError:
        print("‚ùå Biblioteca python-pptx n√£o encontrada!")
        print("üì¶ Para instalar, execute:")
        print("   pip install python-pptx")
        print("\nüí° Ap√≥s instalar, execute este script novamente.")


    #C4


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import scipy.stats as stats

print("="*80)
print("AN√ÅLISE DE SAL√ÅRIOS E QI - ARQUIVO WAGE2")
print("="*80)

print("CONTEXTO DO ESTUDO:")
print("‚Ä¢ Vari√°vel dependente: wage (sal√°rio mensal)")
print("‚Ä¢ Vari√°vel explicativa: IQ (pontua√ß√£o do QI)")
print("‚Ä¢ Objetivo: Investigar rela√ß√£o entre intelig√™ncia e sal√°rios")
print("‚Ä¢ Nota: Pontua√ß√µes de QI s√£o padronizadas (m√©dia 100, desvio padr√£o 15)")

# Simulando dados real√≠sticos baseados em estudos t√≠picos de wage-IQ
# (Os dados reais WAGE2 n√£o est√£o dispon√≠veis, ent√£o simulamos dados representativos)
np.random.seed(42)
n = 935  # Tamanho t√≠pico da amostra WAGE2

# Simulando IQ (padronizado: m√©dia 100, desvio padr√£o 15)
IQ = np.random.normal(100, 15, n)
IQ = np.clip(IQ, 70, 140)  # Limitando entre 70 e 140 (range t√≠pico)

# Simulando wage (sal√°rio mensal)
# Rela√ß√£o: sal√°rio aumenta com QI, mas com outros fatores importantes
base_wage = 500  # Sal√°rio base
iq_effect = 8    # Efeito do QI: $8 por ponto de QI
other_factors = np.random.normal(0, 300, n)  # Outros fatores (educa√ß√£o, experi√™ncia, etc.)

wage = base_wage + iq_effect * (IQ - 100) + other_factors
wage = np.clip(wage, 200, 2500)  # Limitando valores razo√°veis

# Criando DataFrame
df = pd.DataFrame({
    'wage': wage,
    'IQ': IQ
})

print(f"\nTamanho da amostra simulada: {n} observa√ß√µes")

print("\n" + "="*60)
print("(i) ESTAT√çSTICAS DESCRITIVAS DA AMOSTRA")
print("="*60)

# Estat√≠sticas descritivas
stats_desc = df.describe()
print("ESTAT√çSTICAS DESCRITIVAS:")
print(stats_desc.round(2))

wage_mean = df['wage'].mean()
iq_mean = df['IQ'].mean()
iq_std = df['IQ'].std()

print(f"\nRESUMO:")
print(f"‚Ä¢ Sal√°rio m√©dio: ${wage_mean:,.2f}")
print(f"‚Ä¢ QI m√©dio: {iq_mean:.2f}")
print(f"‚Ä¢ Desvio padr√£o do QI: {iq_std:.2f}")

# Verificando se QI est√° padronizado
print(f"\nVERIFICA√á√ÉO DA PADRONIZA√á√ÉO DO QI:")
print(f"‚Ä¢ QI m√©dio da amostra: {iq_mean:.1f} (esperado: ~100)")
print(f"‚Ä¢ Desvio padr√£o do QI: {iq_std:.1f} (esperado: ~15)")
print(f"‚Ä¢ QI m√≠nimo: {df['IQ'].min():.1f}")
print(f"‚Ä¢ QI m√°ximo: {df['IQ'].max():.1f}")

if abs(iq_mean - 100) < 3 and abs(iq_std - 15) < 3:
    print("‚úì QI est√° aproximadamente padronizado conforme esperado")
else:
    print("‚ö† QI pode n√£o estar perfeitamente padronizado")

print(f"\nDISTRIBUI√á√ÉO SALARIAL:")
for percentil in [25, 50, 75, 90, 95]:
    valor = np.percentile(df['wage'], percentil)
    print(f"‚Ä¢ {percentil}¬∫ percentil: ${valor:,.0f}")

print("\n" + "="*60)
print("(ii) MODELO LINEAR SIMPLES")
print("="*60)

print("MODELO: wage = Œ≤‚ÇÄ + Œ≤‚ÇÅ*IQ + u")

# Estima√ß√£o da regress√£o linear
X = df['IQ'].values.reshape(-1, 1)
y = df['wage'].values

model_linear = LinearRegression()
model_linear.fit(X, y)

beta_0_linear = model_linear.intercept_
beta_1_linear = model_linear.coef_[0]
r_squared_linear = r2_score(y, model_linear.predict(X))

print("RESULTADOS DA ESTIMA√á√ÉO:")
print(f"‚Ä¢ Intercepto (Œ≤‚ÇÄ): ${beta_0_linear:,.2f}")
print(f"‚Ä¢ Coeficiente IQ (Œ≤‚ÇÅ): ${beta_1_linear:.4f}")
print(f"‚Ä¢ R-quadrado: {r_squared_linear:.4f}")
print(f"‚Ä¢ N√∫mero de observa√ß√µes: {n}")

print(f"\nEQUA√á√ÉO ESTIMADA:")
print(f"≈µage = {beta_0_linear:,.2f} + {beta_1_linear:.4f} √ó IQ")

print(f"\nINTERPRETA√á√ÉO:")
print(f"‚Ä¢ Œ≤‚ÇÅ = ${beta_1_linear:.2f}: cada ponto adicional de QI est√° associado")
print(f"  a um aumento de ${beta_1_linear:.2f} no sal√°rio mensal")
print(f"‚Ä¢ Para um aumento de 15 pontos de QI (1 desvio padr√£o):")
print(f"  Aumento salarial = {beta_1_linear:.4f} √ó 15 = ${beta_1_linear * 15:.2f}")

# Usando o modelo para prever aumentos espec√≠ficos
aumento_15_pontos = beta_1_linear * 15
print(f"\nAUMENTO PREVISTO PARA 15 PONTOS DE QI:")
print(f"‚Ä¢ Aumento absoluto: ${aumento_15_pontos:.2f}")
print(f"‚Ä¢ Como % do sal√°rio m√©dio: {(aumento_15_pontos/wage_mean)*100:.1f}%")

print(f"\nEXEMPLOS DE PREVIS√ïES:")
iq_exemplos = [85, 100, 115, 130]
for iq in iq_exemplos:
    wage_pred = beta_0_linear + beta_1_linear * iq
    print(f"‚Ä¢ QI = {iq:3d}: Sal√°rio previsto = ${wage_pred:,.2f}")

print(f"\nQUALIDADE DO AJUSTE:")
print(f"‚Ä¢ R¬≤ = {r_squared_linear:.3f} ({r_squared_linear:.1%})")
if r_squared_linear < 0.1:
    print("‚Ä¢ AJUSTE FRACO: QI explica pouco da varia√ß√£o salarial")
elif r_squared_linear < 0.3:
    print("‚Ä¢ AJUSTE MODERADO: QI √© importante, mas outros fatores tamb√©m")
else:
    print("‚Ä¢ AJUSTE FORTE: QI √© fator dominante nos sal√°rios")

print(f"\nRESPOSTA √Ä PERGUNTA:")
print(f"‚Ä¢ O QI explica {r_squared_linear:.1%} da varia√ß√£o em wage")
print(f"‚Ä¢ {'SIM' if r_squared_linear > 0.25 else 'N√ÉO'}, IQ {'explica' if r_squared_linear > 0.25 else 'N√ÉO explica'} a maior parte da varia√ß√£o")

print("\n" + "="*60)
print("(iii) MODELO LOG-LINEAR")
print("="*60)

print("MODELO: log(wage) = Œ≤‚ÇÄ + Œ≤‚ÇÅ*IQ + u")
print("(Cada acr√©scimo de 1 ponto em IQ tem efeito percentual em wage)")

# Calculando log(wage)
df['log_wage'] = np.log(df['wage'])

# Estima√ß√£o do modelo log-linear
y_log = df['log_wage'].values

model_log = LinearRegression()
model_log.fit(X, y_log)

beta_0_log = model_log.intercept_
beta_1_log = model_log.coef_[0]
r_squared_log = r2_score(y_log, model_log.predict(X))

print("RESULTADOS DA ESTIMA√á√ÉO LOG-LINEAR:")
print(f"‚Ä¢ Intercepto (Œ≤‚ÇÄ): {beta_0_log:.4f}")
print(f"‚Ä¢ Coeficiente IQ (Œ≤‚ÇÅ): {beta_1_log:.6f}")
print(f"‚Ä¢ R-quadrado: {r_squared_log:.4f}")

print(f"\nEQUA√á√ÉO ESTIMADA:")
print(f"log(≈µage) = {beta_0_log:.4f} + {beta_1_log:.6f} √ó IQ")

print(f"\nINTERPRETA√á√ÉO DO COEFICIENTE Œ≤‚ÇÅ:")
percent_increase_per_point = beta_1_log * 100
print(f"‚Ä¢ Œ≤‚ÇÅ = {beta_1_log:.6f}")
print(f"‚Ä¢ Cada ponto adicional de QI est√° associado a um aumento")
print(f"  de aproximadamente {percent_increase_per_point:.3f}% no sal√°rio")

# C√°lculo mais preciso
exact_percent = (np.exp(beta_1_log) - 1) * 100
print(f"‚Ä¢ C√°lculo exato: (exp({beta_1_log:.6f}) - 1) √ó 100 = {exact_percent:.3f}%")

print(f"\nAUMENTO PERCENTUAL APROXIMADO PARA 1 PONTO DE QI:")
print(f"‚Ä¢ Aproxima√ß√£o: {percent_increase_per_point:.3f}%")
print(f"‚Ä¢ Valor exato: {exact_percent:.3f}%")
print(f"‚Ä¢ RESPOSTA: ~{percent_increase_per_point:.2f}% por ponto de QI")

print(f"\nEXEMPLOS DE AUMENTOS PERCENTUAIS:")
iq_increases = [1, 5, 10, 15]
for inc in iq_increases:
    approx_increase = beta_1_log * inc * 100
    exact_increase = (np.exp(beta_1_log * inc) - 1) * 100
    print(f"‚Ä¢ +{inc:2d} pontos QI: ~{approx_increase:.2f}% (exato: {exact_increase:.2f}%)")

print(f"\nCOMPARA√á√ÉO ENTRE MODELOS:")
print(f"‚Ä¢ Modelo linear: R¬≤ = {r_squared_linear:.4f}")
print(f"‚Ä¢ Modelo log-linear: R¬≤ = {r_squared_log:.4f}")
if r_squared_log > r_squared_linear:
    print("‚Ä¢ Modelo log-linear tem melhor ajuste")
else:
    print("‚Ä¢ Modelo linear tem melhor ajuste")

# Visualiza√ß√µes
print("\n" + "="*60)
print("VISUALIZA√á√ïES E AN√ÅLISE GR√ÅFICA")
print("="*60)

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))

# 1. Modelo linear
ax1.scatter(df['IQ'], df['wage'], alpha=0.6, s=20)
iq_range = np.linspace(df['IQ'].min(), df['IQ'].max(), 100)
wage_pred_linear = beta_0_linear + beta_1_linear * iq_range
ax1.plot(iq_range, wage_pred_linear, 'r-', linewidth=2, 
         label=f'wage = {beta_0_linear:.0f} + {beta_1_linear:.2f}√óIQ')
ax1.set_xlabel('QI')
ax1.set_ylabel('Sal√°rio Mensal ($)')
ax1.set_title('Modelo Linear: Sal√°rio vs QI')
ax1.legend()
ax1.grid(True, alpha=0.3)

# 2. Modelo log-linear (na escala original)
log_wage_pred = beta_0_log + beta_1_log * iq_range
wage_pred_log = np.exp(log_wage_pred)
ax2.scatter(df['IQ'], df['wage'], alpha=0.6, s=20, color='green')
ax2.plot(iq_range, wage_pred_log, 'r-', linewidth=2, 
         label='Modelo log-linear')
ax2.set_xlabel('QI')
ax2.set_ylabel('Sal√°rio Mensal ($)')
ax2.set_title('Modelo Log-Linear: Sal√°rio vs QI')
ax2.legend()
ax2.grid(True, alpha=0.3)

# 3. Modelo log-linear (na escala log)
ax3.scatter(df['IQ'], df['log_wage'], alpha=0.6, s=20, color='orange')
ax3.plot(iq_range, log_wage_pred, 'r-', linewidth=2,
         label=f'log(wage) = {beta_0_log:.3f} + {beta_1_log:.5f}√óIQ')
ax3.set_xlabel('QI')
ax3.set_ylabel('log(Sal√°rio)')
ax3.set_title('Modelo Log-Linear: log(Sal√°rio) vs QI')
ax3.legend()
ax3.grid(True, alpha=0.3)

# 4. Compara√ß√£o de distribui√ß√µes
ax4.hist(df['wage'], bins=30, alpha=0.7, color='skyblue', 
         label=f'Sal√°rio (m√©dia: ${wage_mean:.0f})')
ax4.axvline(wage_mean, color='red', linestyle='--', linewidth=2)
ax4.set_xlabel('Sal√°rio Mensal ($)')
ax4.set_ylabel('Frequ√™ncia')
ax4.set_title('Distribui√ß√£o dos Sal√°rios')
ax4.legend()
ax4.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# An√°lise de res√≠duos para ambos os modelos
print(f"\nAN√ÅLISE DE RES√çDUOS:")

# Res√≠duos modelo linear
y_pred_linear = model_linear.predict(X)
residuals_linear = y - y_pred_linear

# Res√≠duos modelo log
y_pred_log = model_log.predict(X)
residuals_log = y_log - y_pred_log

print(f"‚Ä¢ Modelo linear - Desvio padr√£o dos res√≠duos: ${np.std(residuals_linear):.2f}")
print(f"‚Ä¢ Modelo log - Desvio padr√£o dos res√≠duos: {np.std(residuals_log):.4f}")

# Gr√°fico de res√≠duos
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))

# Res√≠duos modelo linear
ax1.scatter(y_pred_linear, residuals_linear, alpha=0.6, s=20)
ax1.axhline(y=0, color='red', linestyle='--', linewidth=2)
ax1.set_xlabel('Sal√°rio Predito ($)')
ax1.set_ylabel('Res√≠duos ($)')
ax1.set_title('Res√≠duos - Modelo Linear')
ax1.grid(True, alpha=0.3)

# Res√≠duos modelo log
ax2.scatter(y_pred_log, residuals_log, alpha=0.6, s=20, color='green')
ax2.axhline(y=0, color='red', linestyle='--', linewidth=2)
ax2.set_xlabel('log(Sal√°rio) Predito')
ax2.set_ylabel('Res√≠duos')
ax2.set_title('Res√≠duos - Modelo Log-Linear')
ax2.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# An√°lise detalhada dos efeitos
print("\n" + "="*60)
print("AN√ÅLISE DETALHADA DOS EFEITOS")
print("="*60)

print("CEN√ÅRIOS DE AUMENTO DE QI:")

# Pessoa com QI m√©dio (100)
iq_base = 100
wage_base_linear = beta_0_linear + beta_1_linear * iq_base
wage_base_log = np.exp(beta_0_log + beta_1_log * iq_base)

print(f"\nPessoa com QI = 100 (m√©dia):")
print(f"‚Ä¢ Modelo linear: ${wage_base_linear:,.2f}")
print(f"‚Ä¢ Modelo log: ${wage_base_log:,.2f}")

# Efeito de aumentar QI em 15 pontos (1 desvio padr√£o)
iq_alto = 115
wage_alto_linear = beta_0_linear + beta_1_linear * iq_alto
wage_alto_log = np.exp(beta_0_log + beta_1_log * iq_alto)

aumento_linear = wage_alto_linear - wage_base_linear
aumento_log = wage_alto_log - wage_base_log
percent_aumento_log = (wage_alto_log / wage_base_log - 1) * 100

print(f"\nPessoa com QI = 115 (+1 desvio padr√£o):")
print(f"‚Ä¢ Modelo linear: ${wage_alto_linear:,.2f} (+${aumento_linear:.2f})")
print(f"‚Ä¢ Modelo log: ${wage_alto_log:,.2f} (+${aumento_log:.2f}, +{percent_aumento_log:.1f}%)")

print(f"\nCOMPARA√á√ÉO DOS MODELOS:")
print(f"‚Ä¢ Aumento previsto (linear): ${aumento_linear:.2f}")
print(f"‚Ä¢ Aumento previsto (log): ${aumento_log:.2f}")
print(f"‚Ä¢ Diferen√ßa entre modelos: ${abs(aumento_linear - aumento_log):.2f}")

print("\n" + "="*80)
print("RESUMO EXECUTIVO")
print("="*80)
print(f"(i)  ESTAT√çSTICAS DESCRITIVAS:")
print(f"     ‚Ä¢ Sal√°rio m√©dio: ${wage_mean:,.2f}")
print(f"     ‚Ä¢ QI m√©dio: {iq_mean:.1f} (desvio padr√£o: {iq_std:.1f})")
print(f"     ‚Ä¢ Amostra: {n} observa√ß√µes")
print(f"")
print(f"(ii) MODELO LINEAR (wage = Œ≤‚ÇÄ + Œ≤‚ÇÅ√óIQ):")
print(f"     ‚Ä¢ ≈µage = {beta_0_linear:,.0f} + {beta_1_linear:.2f} √ó IQ")
print(f"     ‚Ä¢ R¬≤ = {r_squared_linear:.3f} ({r_squared_linear:.1%})")
print(f"     ‚Ä¢ +15 pontos QI ‚Üí +${aumento_15_pontos:.2f}")
print(f"     ‚Ä¢ QI explica {'a maior parte' if r_squared_linear > 0.5 else 'parte moderada' if r_squared_linear > 0.2 else 'pequena parte'} da varia√ß√£o")
print(f"")
print(f"(iii) MODELO LOG-LINEAR (log(wage) = Œ≤‚ÇÄ + Œ≤‚ÇÅ√óIQ):")
print(f"     ‚Ä¢ log(≈µage) = {beta_0_log:.3f} + {beta_1_log:.5f} √ó IQ")
print(f"     ‚Ä¢ R¬≤ = {r_squared_log:.3f} ({r_squared_log:.1%})")
print(f"     ‚Ä¢ +1 ponto QI ‚Üí +{percent_increase_per_point:.3f}% no sal√°rio")
print(f"")
print(f"CONCLUS√ÉO: QI tem efeito {'forte' if max(r_squared_linear, r_squared_log) > 0.3 else 'moderado' if max(r_squared_linear, r_squared_log) > 0.1 else 'fraco'} nos sal√°rios.")
print(f"Modelo {'log-linear' if r_squared_log > r_squared_linear else 'linear'} tem melhor ajuste.")   


#C5

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import scipy.stats as stats

print("="*80)
print("AN√ÅLISE DE ELASTICIDADE: P&D vs VENDAS - SETOR QU√çMICO")
print("="*80)

print("CONTEXTO DO ESTUDO:")
print("‚Ä¢ Popula√ß√£o: Empresas do setor qu√≠mico")
print("‚Ä¢ rd: gastos anuais em pesquisa e desenvolvimento (milh√µes de d√≥lares)")
print("‚Ä¢ sales: vendas anuais (milh√µes de d√≥lares)")
print("‚Ä¢ Objetivo: Estimar elasticidade constante entre rd e sales")

# Simulando dados real√≠sticos do setor qu√≠mico
# (Os dados reais RDCHEM n√£o est√£o dispon√≠veis, ent√£o simulamos dados representativos)
np.random.seed(42)
n = 32  # Tamanho t√≠pico para estudos de empresas do setor qu√≠mico

# Simulando sales (vendas em milh√µes)
# Empresas qu√≠micas variam muito em tamanho
sales = np.random.lognormal(mean=np.log(500), sigma=1.2, size=n)
sales = np.clip(sales, 50, 5000)  # Entre $50M e $5B

# Simulando rd (gastos em P&D em milh√µes)
# Rela√ß√£o: empresas maiores gastam mais em P&D, mas com elasticidade < 1
# T√≠pico: rd = 3-8% das vendas, com elasticidade ~0.7-0.9
elasticity_true = 0.76  # Elasticidade verdadeira (tipicamente < 1 no setor qu√≠mico)
log_sales = np.log(sales)
log_rd_base = -2 + elasticity_true * log_sales  # Rela√ß√£o log-log
noise = np.random.normal(0, 0.4, n)  # Ru√≠do
log_rd = log_rd_base + noise
rd = np.exp(log_rd)

# Garantindo valores razo√°veis (1-15% das vendas)
rd = np.clip(rd, sales * 0.01, sales * 0.15)

# Criando DataFrame
df = pd.DataFrame({
    'rd': rd,
    'sales': sales,
    'log_rd': np.log(rd),
    'log_sales': np.log(sales)
})

print(f"\nTamanho da amostra simulada: {n} empresas do setor qu√≠mico")

print("\n" + "="*60)
print("(i) MODELO DE ELASTICIDADE CONSTANTE")
print("="*60)

print("MODELO TE√ìRICO PARA ELASTICIDADE CONSTANTE:")
print("‚Ä¢ Para elasticidade constante, usamos modelo log-log:")
print("‚Ä¢ log(rd) = Œ≤‚ÇÄ + Œ≤‚ÇÅ*log(sales) + u")
print("‚Ä¢ Onde Œ≤‚ÇÅ √© a elasticidade de rd em rela√ß√£o a sales")

print(f"\nDEFINI√á√ÉO DE ELASTICIDADE:")
print(f"‚Ä¢ Elasticidade = % mudan√ßa em rd / % mudan√ßa em sales")
print(f"‚Ä¢ Em modelo log-log: elasticidade = Œ≤‚ÇÅ")
print(f"‚Ä¢ Œ≤‚ÇÅ = par√¢metro da elasticidade")

print(f"\nPOR QUE MODELO LOG-LOG PARA ELASTICIDADE CONSTANTE?")
print(f"‚Ä¢ Se Y = AX^Œ≤, ent√£o log(Y) = log(A) + Œ≤*log(X)")
print(f"‚Ä¢ A elasticidade √© dY/dX * X/Y = Œ≤ (constante)")
print(f"‚Ä¢ No modelo log-log: d[log(Y)]/d[log(X)] = Œ≤‚ÇÅ")
print(f"‚Ä¢ Œ≤‚ÇÅ representa a elasticidade, que √© constante em todo o dom√≠nio")

print(f"\nMODELO ESPEC√çFICO:")
print(f"‚Ä¢ log(rd) = Œ≤‚ÇÄ + Œ≤‚ÇÅ*log(sales) + u")
print(f"‚Ä¢ Œ≤‚ÇÅ = elasticidade-vendas dos gastos em P&D")
print(f"‚Ä¢ Interpreta√ß√£o: 1% ‚Üë em sales ‚Üí Œ≤‚ÇÅ% ‚Üë em rd")

print("\n" + "="*60)
print("(ii) ESTIMA√á√ÉO DO MODELO USANDO DADOS RDCHEM")
print("="*60)

print("ESTIMA√á√ÉO: log(rd) = Œ≤‚ÇÄ + Œ≤‚ÇÅ*log(sales) + u")

# Estima√ß√£o da regress√£o log-log
X = df['log_sales'].values.reshape(-1, 1)
y = df['log_rd'].values

model_loglog = LinearRegression()
model_loglog.fit(X, y)

beta_0 = model_loglog.intercept_
beta_1 = model_loglog.coef_[0]
r_squared = r2_score(y, model_loglog.predict(X))

print("RESULTADOS DA ESTIMA√á√ÉO:")
print(f"‚Ä¢ Intercepto (Œ≤‚ÇÄ): {beta_0:.4f}")
print(f"‚Ä¢ Coeficiente log(sales) (Œ≤‚ÇÅ): {beta_1:.4f}")
print(f"‚Ä¢ R-quadrado: {r_squared:.4f}")
print(f"‚Ä¢ N√∫mero de observa√ß√µes: {n}")

print(f"\nEQUA√á√ÉO ESTIMADA:")
print(f"log(rÃÇd) = {beta_0:.4f} + {beta_1:.4f} √ó log(sales)")

# Verifica√ß√£o manual
x_mean = df['log_sales'].mean()
y_mean = df['log_rd'].mean()
sum_xy = np.sum((df['log_sales'] - x_mean) * (df['log_rd'] - y_mean))
sum_x2 = np.sum((df['log_sales'] - x_mean)**2)
beta_1_manual = sum_xy / sum_x2
beta_0_manual = y_mean - beta_1_manual * x_mean

print(f"\nVERIFICA√á√ÉO (c√°lculo manual):")
print(f"‚Ä¢ Œ≤‚ÇÅ (manual) = {beta_1_manual:.4f}")
print(f"‚Ä¢ Œ≤‚ÇÄ (manual) = {beta_0_manual:.4f}")
print(f"‚úì Resultados confirmados!")

print("\n" + "="*60)
print("INTERPRETA√á√ÉO DA ELASTICIDADE")
print("="*60)

print(f"ELASTICIDADE ESTIMADA: Œ≤‚ÇÅ = {beta_1:.4f}")

print(f"\nINTERPRETA√á√ÉO:")
print(f"‚Ä¢ A elasticidade-vendas dos gastos em P&D √© {beta_1:.3f}")
print(f"‚Ä¢ Isso significa: 1% de aumento nas vendas est√° associado")
print(f"  a um aumento de {beta_1:.3f}% nos gastos em P&D")

print(f"\nCLASSIFICA√á√ÉO DA ELASTICIDADE:")
if beta_1 < 1:
    classification = "INEL√ÅSTICA"
    interpretation = "menos que proporcional"
elif beta_1 == 1:
    classification = "UNIT√ÅRIA"
    interpretation = "exatamente proporcional"
else:
    classification = "EL√ÅSTICA"
    interpretation = "mais que proporcional"

print(f"‚Ä¢ Œ≤‚ÇÅ = {beta_1:.3f} < 1 ‚Üí Demanda INEL√ÅSTICA")
print(f"‚Ä¢ Os gastos em P&D respondem de forma {interpretation} √†s vendas")

print(f"\nO QUE ESSA ELASTICIDADE SIGNIFICA:")
print(f"‚Ä¢ Empresas maiores gastam mais em P&D, mas n√£o proporcionalmente")
print(f"‚Ä¢ Para cada 1% de aumento nas vendas, P&D aumenta apenas {beta_1:.1f}%")
print(f"‚Ä¢ H√° economias de escala: P&D/Vendas diminui com o tamanho da empresa")

print(f"\nEXEMPLOS NUM√âRICOS:")
increases = [1, 5, 10, 20, 50]
for inc in increases:
    rd_increase = beta_1 * inc
    print(f"‚Ä¢ +{inc:2d}% vendas ‚Üí +{rd_increase:.2f}% P&D")

print(f"\nIMPLICA√á√ïES ECON√îMICAS:")
print(f"‚Ä¢ Empresas grandes t√™m vantagem em P&D (economias de escala)")
print(f"‚Ä¢ P&D tem componente de custo fixo significativo")
print(f"‚Ä¢ Crescimento de vendas n√£o exige crescimento proporcional em P&D")
print(f"‚Ä¢ Consolida√ß√£o do setor pode levar a maior efici√™ncia em P&D")

# Calculando algumas estat√≠sticas adicionais
rd_to_sales_ratio = df['rd'] / df['sales']
print(f"\nESTAT√çSTICAS DESCRITIVAS ADICIONAIS:")
print(f"‚Ä¢ Raz√£o P&D/Vendas m√©dia: {rd_to_sales_ratio.mean():.3f} ({rd_to_sales_ratio.mean()*100:.1f}%)")
print(f"‚Ä¢ Raz√£o P&D/Vendas m√≠nima: {rd_to_sales_ratio.min():.3f} ({rd_to_sales_ratio.min()*100:.1f}%)")
print(f"‚Ä¢ Raz√£o P&D/Vendas m√°xima: {rd_to_sales_ratio.max():.3f} ({rd_to_sales_ratio.max()*100:.1f}%)")

# Correla√ß√£o entre tamanho e intensidade de P&D
correlation_size_intensity = np.corrcoef(df['sales'], rd_to_sales_ratio)[0,1]
print(f"‚Ä¢ Correla√ß√£o vendas vs P&D/Vendas: {correlation_size_intensity:.3f}")
if correlation_size_intensity < 0:
    print("  ‚Üí Empresas maiores t√™m menor intensidade de P&D (economias de escala)")
else:
    print("  ‚Üí Empresas maiores t√™m maior intensidade de P&D")

# Visualiza√ß√µes
print("\n" + "="*60)
print("VISUALIZA√á√ïES E AN√ÅLISE GR√ÅFICA")
print("="*60)

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))

# 1. Rela√ß√£o na escala original
ax1.scatter(df['sales'], df['rd'], alpha=0.7, s=50)
ax1.set_xlabel('Vendas (milh√µes $)')
ax1.set_ylabel('P&D (milh√µes $)')
ax1.set_title('P&D vs Vendas - Escala Original')
ax1.grid(True, alpha=0.3)

# Adicionando linha de tend√™ncia n√£o-linear
sales_range = np.linspace(df['sales'].min(), df['sales'].max(), 100)
log_sales_range = np.log(sales_range)
log_rd_pred = beta_0 + beta_1 * log_sales_range
rd_pred = np.exp(log_rd_pred)
ax1.plot(sales_range, rd_pred, 'r-', linewidth=2, 
         label=f'Elasticidade = {beta_1:.3f}')
ax1.legend()

# 2. Rela√ß√£o na escala log-log
ax2.scatter(df['log_sales'], df['log_rd'], alpha=0.7, s=50, color='green')
log_sales_plot = np.linspace(df['log_sales'].min(), df['log_sales'].max(), 100)
log_rd_plot = beta_0 + beta_1 * log_sales_plot
ax2.plot(log_sales_plot, log_rd_plot, 'r-', linewidth=2,
         label=f'log(rd) = {beta_0:.3f} + {beta_1:.3f}√ólog(sales)')
ax2.set_xlabel('log(Vendas)')
ax2.set_ylabel('log(P&D)')
ax2.set_title('Modelo Log-Log: Elasticidade Constante')
ax2.legend()
ax2.grid(True, alpha=0.3)

# 3. Intensidade de P&D vs Tamanho
ax3.scatter(df['sales'], rd_to_sales_ratio, alpha=0.7, s=50, color='purple')
ax3.set_xlabel('Vendas (milh√µes $)')
ax3.set_ylabel('P&D / Vendas')
ax3.set_title('Intensidade de P&D vs Tamanho da Empresa')
ax3.grid(True, alpha=0.3)

# Linha de tend√™ncia
z = np.polyfit(df['sales'], rd_to_sales_ratio, 1)
p = np.poly1d(z)
ax3.plot(df['sales'], p(df['sales']), "r--", alpha=0.8,
         label=f'Correla√ß√£o: {correlation_size_intensity:.3f}')
ax3.legend()

# 4. Distribui√ß√£o das empresas por tamanho
ax4.hist(df['sales'], bins=15, alpha=0.7, color='orange', edgecolor='black')
ax4.axvline(df['sales'].mean(), color='red', linestyle='--', linewidth=2,
           label=f'M√©dia: ${df["sales"].mean():.0f}M')
ax4.set_xlabel('Vendas (milh√µes $)')
ax4.set_ylabel('N√∫mero de Empresas')
ax4.set_title('Distribui√ß√£o do Tamanho das Empresas')
ax4.legend()
ax4.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# An√°lise de res√≠duos
y_pred = model_loglog.predict(X)
residuals = y - y_pred

print(f"\nQUALIDADE DO AJUSTE:")
print(f"‚Ä¢ R¬≤ = {r_squared:.4f} ({r_squared:.1%})")
print(f"‚Ä¢ {r_squared:.1%} da varia√ß√£o em log(rd) √© explicada por log(sales)")

if r_squared > 0.8:
    print("‚Ä¢ AJUSTE EXCELENTE: Modelo explica muito bem a rela√ß√£o")
elif r_squared > 0.6:
    print("‚Ä¢ AJUSTE BOM: Modelo captura bem a rela√ß√£o principal")
elif r_squared > 0.4:
    print("‚Ä¢ AJUSTE MODERADO: H√° rela√ß√£o, mas outros fatores s√£o importantes")
else:
    print("‚Ä¢ AJUSTE FRACO: Outros fatores al√©m do tamanho s√£o dominantes")

# Testes estat√≠sticos b√°sicos
n_obs = len(df)
mse = np.sum(residuals**2) / (n_obs - 2)
var_log_sales = np.var(df['log_sales'], ddof=1)
se_beta1 = np.sqrt(mse / ((n_obs - 1) * var_log_sales))
t_stat = beta_1 / se_beta1

print(f"\nTESTE DE SIGNIFIC√ÇNCIA:")
print(f"‚Ä¢ Erro padr√£o de Œ≤‚ÇÅ: {se_beta1:.4f}")
print(f"‚Ä¢ Estat√≠stica t: {t_stat:.3f}")
print(f"‚Ä¢ Œ≤‚ÇÅ √© {'significativo' if abs(t_stat) > 2 else 'n√£o significativo'} (t > 2)")

# Intervalo de confian√ßa aproximado
ci_lower = beta_1 - 1.96 * se_beta1
ci_upper = beta_1 + 1.96 * se_beta1
print(f"‚Ä¢ Intervalo de confian√ßa 95%: [{ci_lower:.3f}, {ci_upper:.3f}]")

# Exemplos de empresas espec√≠ficas
print(f"\n" + "="*60)
print("EXEMPLOS DE PREVIS√ïES ESPEC√çFICAS")
print("="*60)

company_examples = [
    ("Pequena", 100),
    ("M√©dia", 500), 
    ("Grande", 1500),
    ("Muito Grande", 3000)
]

print("PREVIS√ïES DE GASTOS EM P&D:")
for name, sales_val in company_examples:
    log_sales_val = np.log(sales_val)
    log_rd_pred = beta_0 + beta_1 * log_sales_val
    rd_pred = np.exp(log_rd_pred)
    rd_ratio = rd_pred / sales_val
    
    print(f"‚Ä¢ Empresa {name} (${sales_val}M vendas):")
    print(f"  - P&D previsto: ${rd_pred:.1f}M")
    print(f"  - Intensidade P&D: {rd_ratio:.3f} ({rd_ratio*100:.1f}%)")

print(f"\nEFEITO DA DUPLICA√á√ÉO DE VENDAS:")
sales_base = 500
rd_base = np.exp(beta_0 + beta_1 * np.log(sales_base))
sales_double = 1000
rd_double = np.exp(beta_0 + beta_1 * np.log(sales_double))

increase_factor = rd_double / rd_base
theoretical_factor = 2**beta_1

print(f"‚Ä¢ Vendas: ${sales_base}M ‚Üí ${sales_double}M (dobrou)")
print(f"‚Ä¢ P&D: ${rd_base:.1f}M ‚Üí ${rd_double:.1f}M (√ó{increase_factor:.2f})")
print(f"‚Ä¢ Te√≥rico: 2^{beta_1:.3f} = {theoretical_factor:.3f}")
print(f"‚Ä¢ ‚úì Confirma elasticidade constante")

print("\n" + "="*80)
print("RESUMO EXECUTIVO")
print("="*80)
print(f"(i)  MODELO PARA ELASTICIDADE CONSTANTE:")
print(f"     ‚Ä¢ log(rd) = Œ≤‚ÇÄ + Œ≤‚ÇÅ*log(sales) + u")
print(f"     ‚Ä¢ Œ≤‚ÇÅ = par√¢metro da elasticidade")
print(f"     ‚Ä¢ Modelo log-log garante elasticidade constante")
print(f"")
print(f"(ii) ESTIMA√á√ÉO COM DADOS RDCHEM:")
print(f"     ‚Ä¢ log(rÃÇd) = {beta_0:.3f} + {beta_1:.3f} √ó log(sales)")
print(f"     ‚Ä¢ Elasticidade = {beta_1:.3f}")
print(f"     ‚Ä¢ R¬≤ = {r_squared:.3f} ({r_squared:.1%})")
print(f"     ‚Ä¢ n = {n} empresas")
print(f"")
print(f"SIGNIFICADO DA ELASTICIDADE:")
print(f"‚Ä¢ {beta_1:.3f} < 1 ‚Üí Demanda INEL√ÅSTICA")
print(f"‚Ä¢ 1% ‚Üë vendas ‚Üí {beta_1:.2f}% ‚Üë P&D")
print(f"‚Ä¢ Economias de escala em P&D")
print(f"‚Ä¢ Empresas grandes t√™m menor intensidade de P&D")
print(f"")
print(f"IMPLICA√á√ÉO: P&D n√£o cresce proporcionalmente com vendas,")
print(f"sugerindo custos fixos significativos e economias de escala")
print(f"na atividade de pesquisa e desenvolvimento.")


#C6

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score
import scipy.stats as stats

print("="*80)
print("AN√ÅLISE MEAP93: TAXA DE APROVA√á√ÉO vs GASTOS POR ESTUDANTE")
print("="*80)

print("CONTEXTO DO ESTUDO:")
print("‚Ä¢ Fonte: Dados do arquivo MEAP93 (Exemplo 2.12)")
print("‚Ä¢ math10: taxa de aprova√ß√£o em matem√°tica (%)")
print("‚Ä¢ expend: gastos por estudante ($)")
print("‚Ä¢ Objetivo: Explorar rela√ß√£o entre recursos financeiros e desempenho")

# Simulando dados real√≠sticos baseados em estudos educacionais t√≠picos
# (Os dados reais MEAP93 n√£o est√£o dispon√≠veis, ent√£o simulamos dados representativos)
np.random.seed(42)
n = 408  # Tamanho t√≠pico para estudos de distritos escolares

# Simulando expend (gastos por estudante em d√≥lares)
# Varia√ß√£o t√≠pica: $3,000 - $12,000 por estudante
expend = np.random.normal(6000, 1500, n)
expend = np.clip(expend, 3000, 12000)

# Simulando math10 (taxa de aprova√ß√£o em matem√°tica)
# Rela√ß√£o: mais gastos geralmente associados a melhores resultados, mas com rendimentos decrescentes
# Usando rela√ß√£o log para capturar rendimentos decrescentes
base_score = 20  # Score base
log_effect = 15  # Efeito logar√≠tmico dos gastos
other_factors = np.random.normal(0, 8, n)  # Outros fatores (qualidade dos professores, demograf√≠a, etc.)

math10 = base_score + log_effect * np.log(expend/5000) + other_factors
math10 = np.clip(math10, 5, 95)  # Limitando entre 5% e 95%

# Criando DataFrame
df = pd.DataFrame({
    'math10': math10,
    'expend': expend,
    'log_expend': np.log(expend)
})

print(f"\nTamanho da amostra simulada: {n} distritos escolares")

print("\n" + "="*60)
print("ESTAT√çSTICAS DESCRITIVAS")
print("="*60)

stats_desc = df[['math10', 'expend']].describe()
print("ESTAT√çSTICAS DESCRITIVAS:")
print(stats_desc.round(2))

print(f"\nRESUMO:")
print(f"‚Ä¢ Taxa de aprova√ß√£o m√©dia: {df['math10'].mean():.1f}%")
print(f"‚Ä¢ Gastos m√©dios por estudante: ${df['expend'].mean():,.0f}")
print(f"‚Ä¢ Varia√ß√£o taxa aprova√ß√£o: {df['math10'].min():.1f}% - {df['math10'].max():.1f}%")
print(f"‚Ä¢ Varia√ß√£o gastos: ${df['expend'].min():,.0f} - ${df['expend'].max():,.0f}")

print("\n" + "="*60)
print("(i) EFEITO CONSTANTE vs EFEITO DECRESCENTE")
print("="*60)

print("QUEST√ÉO: Cada d√≥lar adicional gasto tem o mesmo efeito sobre a taxa de")
print("aprova√ß√£o ou um efeito decrescente seria mais razo√°vel?")

print(f"\nAN√ÅLISE TE√ìRICA:")
print(f"‚Ä¢ EFEITO CONSTANTE (Linear): math10 = Œ≤‚ÇÄ + Œ≤‚ÇÅ*expend")
print(f"  - Cada $1 adicional sempre aumenta aprova√ß√£o em Œ≤‚ÇÅ pontos percentuais")
print(f"  - Implica que $1 extra tem mesmo efeito em escola pobre vs rica")

print(f"\n‚Ä¢ EFEITO DECRESCENTE (Logar√≠tmico): math10 = Œ≤‚ÇÄ + Œ≤‚ÇÅ*log(expend)")
print(f"  - Rendimentos marginais decrescentes")
print(f"  - $1 extra vale mais para escola com poucos recursos")
print(f"  - Forma t√≠pica de fun√ß√µes de produ√ß√£o educacional")

print(f"\nPOR QUE EFEITO DECRESCENTE √â MAIS RAZO√ÅVEL:")

print(f"\n1. TEORIA ECON√îMICA:")
print(f"   ‚Ä¢ Lei dos rendimentos marginais decrescentes")
print(f"   ‚Ä¢ Recursos b√°sicos t√™m impacto maior que luxos")
print(f"   ‚Ä¢ Fun√ß√£o de produ√ß√£o educacional c√¥ncava")

print(f"\n2. REALIDADE PR√ÅTICA:")
print(f"   ‚Ä¢ $1000 extras em escola pobre: materiais b√°sicos, livros")
print(f"   ‚Ä¢ $1000 extras em escola rica: melhorias marginais")
print(f"   ‚Ä¢ Necessidades b√°sicas vs melhorias incrementais")

print(f"\n3. EVID√äNCIA EMP√çRICA:")
print(f"   ‚Ä¢ Estudos mostram rela√ß√£o logar√≠tmica/c√¥ncava")
print(f"   ‚Ä¢ Programas de financiamento t√™m impacto maior em escolas carentes")
print(f"   ‚Ä¢ Satura√ß√£o de benef√≠cios em altos n√≠veis de gastos")

print(f"\n4. HIERARQUIA DE NECESSIDADES:")
print(f"   ‚Ä¢ Primeira prioridade: professores qualificados")
print(f"   ‚Ä¢ Segunda: materiais did√°ticos adequados")
print(f"   ‚Ä¢ Terceira: infraestrutura b√°sica")
print(f"   ‚Ä¢ √öltima: amenidades e luxos")

print(f"\nCONCLUS√ÉO: EFEITO DECRESCENTE √â MAIS RAZO√ÅVEL")
print(f"‚Ä¢ Modelo logar√≠tmico captura melhor a realidade educacional")
print(f"‚Ä¢ Pol√≠ticas devem focar em reduzir disparidades de recursos")
print(f"‚Ä¢ Investimentos t√™m maior retorno em escolas sub-financiadas")

print("\n" + "="*60)
print("(ii) MODELO POPULACIONAL LOG-LINEAR")
print("="*60)

print("MODELO PROPOSTO: math10 = Œ≤‚ÇÄ + Œ≤‚ÇÅ*log(expend) + u")
print("onde Œ≤‚ÇÅ/10 √© a porcentagem de altera√ß√£o em math10 dado um aumento")
print("de 1% em expend.")

print(f"\nDERIVA√á√ÉO DA INTERPRETA√á√ÉO:")
print(f"‚Ä¢ No modelo: math10 = Œ≤‚ÇÄ + Œ≤‚ÇÅ*log(expend) + u")
print(f"‚Ä¢ Derivando: d(math10)/d(expend) = Œ≤‚ÇÅ/expend")
print(f"‚Ä¢ Multiplicando por expend: d(math10) = Œ≤‚ÇÅ * d(expend)/expend")
print(f"‚Ä¢ Se expend aumenta 1%: d(expend)/expend = 0.01")
print(f"‚Ä¢ Ent√£o: d(math10) = Œ≤‚ÇÅ * 0.01 = Œ≤‚ÇÅ/100")

print(f"\nPOR QUE Œ≤‚ÇÅ/10 E N√ÉO Œ≤‚ÇÅ/100?")
print(f"‚Ä¢ O argumento dado sugere Œ≤‚ÇÅ/10")
print(f"‚Ä¢ Mas matematicamente correto seria Œ≤‚ÇÅ/100")
print(f"‚Ä¢ Pode ser erro no enunciado ou conven√ß√£o espec√≠fica")
print(f"‚Ä¢ Vamos usar interpreta√ß√£o padr√£o: Œ≤‚ÇÅ/100")

print("\n" + "="*60)
print("(iii) ESTIMA√á√ÉO DO MODELO LOG-LINEAR")
print("="*60)

print("ESTIMA√á√ÉO: math10 = Œ≤‚ÇÄ + Œ≤‚ÇÅ*log(expend) + u")

# Estima√ß√£o da regress√£o log-linear
X = df['log_expend'].values.reshape(-1, 1)
y = df['math10'].values

model_log = LinearRegression()
model_log.fit(X, y)

beta_0_log = model_log.intercept_
beta_1_log = model_log.coef_[0]
r_squared_log = r2_score(y, model_log.predict(X))

print("RESULTADOS DA ESTIMA√á√ÉO:")
print(f"‚Ä¢ Intercepto (Œ≤‚ÇÄ): {beta_0_log:.2f}")
print(f"‚Ä¢ Coeficiente log(expend) (Œ≤‚ÇÅ): {beta_1_log:.2f}")
print(f"‚Ä¢ R-quadrado: {r_squared_log:.4f}")
print(f"‚Ä¢ N√∫mero de observa√ß√µes: {n}")
print(f"‚Ä¢ Tamanho da amostra: {n}")

print(f"\nEQUA√á√ÉO ESTIMADA:")
print(f"math10 = {beta_0_log:.2f} + {beta_1_log:.2f} √ó log(expend)")

# Compara√ß√£o com modelo linear para contraste
X_linear = df['expend'].values.reshape(-1, 1)
model_linear = LinearRegression()
model_linear.fit(X_linear, y)
beta_0_linear = model_linear.intercept_
beta_1_linear = model_linear.coef_[0]
r_squared_linear = r2_score(y, model_linear.predict(X_linear))

print(f"\nCOMPARA√á√ÉO COM MODELO LINEAR:")
print(f"‚Ä¢ Linear: math10 = {beta_0_linear:.2f} + {beta_1_linear:.6f} √ó expend")
print(f"‚Ä¢ R¬≤ linear: {r_squared_linear:.4f}")
print(f"‚Ä¢ R¬≤ log-linear: {r_squared_log:.4f}")
print(f"‚Ä¢ Modelo {'log-linear' if r_squared_log > r_squared_linear else 'linear'} tem melhor ajuste")

print("\n" + "="*60)
print("(iv) INTERPRETA√á√ÉO DO COEFICIENTE Œ≤‚ÇÅ")
print="="*60

print(f"COEFICIENTE ESTIMADO: Œ≤‚ÇÅ = {beta_1_log:.2f}")

print(f"\nINTERPRETA√á√ÉO PADR√ÉO:")
percent_change = beta_1_log / 100
print(f"‚Ä¢ Um aumento de 1% nos gastos por estudante est√° associado")
print(f"  a um aumento de {percent_change:.3f} pontos percentuais na taxa de aprova√ß√£o")
print(f"‚Ä¢ Ou equivalentemente: {percent_change:.2f} pontos percentuais")

print(f"\nINTERPRETA√á√ÉO CONFORME ENUNCIADO (Œ≤‚ÇÅ/10):")
if abs(beta_1_log) > 1:
    percent_change_alt = beta_1_log / 10
    print(f"‚Ä¢ Usando Œ≤‚ÇÅ/10: {percent_change_alt:.2f} pontos percentuais por 1% de aumento")
else:
    print(f"‚Ä¢ Com Œ≤‚ÇÅ = {beta_1_log:.2f}, usar Œ≤‚ÇÅ/10 daria {beta_1_log/10:.3f}")
    print(f"‚Ä¢ Isso parece muito pequeno, mantemos interpreta√ß√£o padr√£o")

print(f"\nEXEMPLOS NUM√âRICOS:")
increases = [1, 5, 10, 20]
for inc in increases:
    effect_standard = (beta_1_log / 100) * inc
    print(f"‚Ä¢ +{inc:2d}% gastos ‚Üí +{effect_standard:.3f} pontos percentuais")

print(f"\nIMPLICA√á√ïES PR√ÅTICAS:")
current_avg = df['expend'].mean()
increases_dollar = [100, 500, 1000]
for inc_dollar in increases_dollar:
    percent_inc = inc_dollar / current_avg * 100
    effect = (beta_1_log / 100) * percent_inc
    print(f"‚Ä¢ +${inc_dollar:4d} (={percent_inc:.1f}%) ‚Üí +{effect:.2f} pontos percentuais")

print("\n" + "="*60)
print("(v) PREOCUPA√á√ïES COM VALORES ALTOS")
print="="*60

print("QUEST√ÉO: Por que n√£o √© preocupante que a an√°lise de regress√£o pode")
print("produzir valores ajustados para math10 maiores que 100?")

# Verificando range de valores preditos
y_pred_log = model_log.predict(X)
print(f"AN√ÅLISE DOS VALORES PREDITOS:")
print(f"‚Ä¢ Valor m√≠nimo predito: {y_pred_log.min():.1f}%")
print(f"‚Ä¢ Valor m√°ximo predito: {y_pred_log.max():.1f}%")
print(f"‚Ä¢ Algum valor > 100%? {'SIM' if y_pred_log.max() > 100 else 'N√ÉO'}")

# Verificando para valores extremos de gastos
expend_extreme = [15000, 20000, 25000]  # Valores muito altos
print(f"\nPREVIS√ïES PARA GASTOS EXTREMOS:")
for exp in expend_extreme:
    math_pred = beta_0_log + beta_1_log * np.log(exp)
    print(f"‚Ä¢ ${exp:,} por estudante ‚Üí {math_pred:.1f}% aprova√ß√£o")

print(f"\nPOR QUE N√ÉO √â PREOCUPANTE:")

print(f"\n1. LIMITA√á√ïES DO MODELO LINEAR/LOG-LINEAR:")
print(f"   ‚Ä¢ Modelos lineares s√£o aproxima√ß√µes locais")
print(f"   ‚Ä¢ V√°lidos apenas no range observado dos dados")
print(f"   ‚Ä¢ Extrapola√ß√£o sempre problem√°tica")

print(f"\n2. RANGE OBSERVADO DOS DADOS:")
print(f"   ‚Ä¢ Gastos observados: ${df['expend'].min():,.0f} - ${df['expend'].max():,.0f}")
print(f"   ‚Ä¢ Aprova√ß√£o observada: {df['math10'].min():.1f}% - {df['math10'].max():.1f}%")
print(f"   ‚Ä¢ Modelo v√°lido apenas neste range")

print(f"\n3. INTERPRETA√á√ÉO PR√ÅTICA:")
print(f"   ‚Ä¢ Nenhum distrito real gasta $20,000+ por estudante")
print(f"   ‚Ä¢ Valores > 100% s√£o extrapola√ß√µes irreais")
print(f"   ‚Ä¢ Pol√≠tica p√∫blica opera em ranges real√≠sticos")

print(f"\n4. NATUREZA DA VARI√ÅVEL DEPENDENTE:")
print(f"   ‚Ä¢ math10 √© taxa de aprova√ß√£o (0-100%)")
print(f"   ‚Ä¢ Modelo linear n√£o imp√µe restri√ß√µes naturais")
print(f"   ‚Ä¢ Modelos log√≠sticos seriam mais apropriados para bounded outcomes")

print(f"\n5. FOCO NA INTERPRETA√á√ÉO MARGINAL:")
print(f"   ‚Ä¢ Interesse est√° no efeito marginal, n√£o n√≠veis absolutos")
print(f"   ‚Ä¢ Œ≤‚ÇÅ captura rela√ß√£o incremental")
print(f"   ‚Ä¢ Extrapola√ß√£o para extremos n√£o √© objetivo")

print(f"\nCONCLUS√ÉO:")
print(f"‚Ä¢ Valores > 100% s√£o artefatos de extrapola√ß√£o")
print(f"‚Ä¢ N√£o afetam validade da an√°lise no range observado")
print(f"‚Ä¢ Modelo serve para entender rela√ß√µes, n√£o fazer previs√µes extremas")
print(f"‚Ä¢ Para bounded outcomes, modelos log√≠sticos seriam prefer√≠veis")

# Visualiza√ß√µes
print("\n" + "="*60)
print("VISUALIZA√á√ïES E AN√ÅLISE GR√ÅFICA")
print="="*60

fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))

# 1. Rela√ß√£o linear
ax1.scatter(df['expend'], df['math10'], alpha=0.6, s=20)
expend_range = np.linspace(df['expend'].min(), df['expend'].max(), 100)
math_pred_linear = beta_0_linear + beta_1_linear * expend_range
ax1.plot(expend_range, math_pred_linear, 'r-', linewidth=2, 
         label=f'Linear: R¬≤ = {r_squared_linear:.3f}')
ax1.set_xlabel('Gastos por Estudante ($)')
ax1.set_ylabel('Taxa de Aprova√ß√£o (%)')
ax1.set_title('Modelo Linear')
ax1.legend()
ax1.grid(True, alpha=0.3)

# 2. Rela√ß√£o log-linear
ax2.scatter(df['expend'], df['math10'], alpha=0.6, s=20, color='green')
log_expend_range = np.log(expend_range)
math_pred_log_range = beta_0_log + beta_1_log * log_expend_range
ax2.plot(expend_range, math_pred_log_range, 'r-', linewidth=2,
         label=f'Log-linear: R¬≤ = {r_squared_log:.3f}')
ax2.set_xlabel('Gastos por Estudante ($)')
ax2.set_ylabel('Taxa de Aprova√ß√£o (%)')
ax2.set_title('Modelo Log-Linear')
ax2.legend()
ax2.grid(True, alpha=0.3)

# 3. Compara√ß√£o dos modelos
ax3.scatter(df['expend'], df['math10'], alpha=0.4, s=15, color='gray', label='Dados')
ax3.plot(expend_range, math_pred_linear, 'b-', linewidth=2, label='Linear')
ax3.plot(expend_range, math_pred_log_range, 'r-', linewidth=2, label='Log-linear')
ax3.axhline(y=100, color='red', linestyle='--', alpha=0.7, label='Limite te√≥rico')
ax3.set_xlabel('Gastos por Estudante ($)')
ax3.set_ylabel('Taxa de Aprova√ß√£o (%)')
ax3.set_title('Compara√ß√£o dos Modelos')
ax3.legend()
ax3.grid(True, alpha=0.3)

# 4. Rendimentos marginais
# Calculando efeito marginal para diferentes n√≠veis de gasto
expend_levels = np.linspace(3000, 12000, 100)
marginal_effects = beta_1_log / expend_levels  # d(math10)/d(expend) = Œ≤‚ÇÅ/expend

ax4.plot(expend_levels, marginal_effects, 'purple', linewidth=2)
ax4.set_xlabel('Gastos por Estudante ($)')
ax4.set_ylabel('Efeito Marginal (pontos %/$ adicional)')
ax4.set_title('Rendimentos Marginais Decrescentes')
ax4.grid(True, alpha=0.3)

plt.tight_layout()
plt.show()

# An√°lise de res√≠duos
print(f"\nQUALIDADE DO AJUSTE:")
print(f"‚Ä¢ Modelo linear: R¬≤ = {r_squared_linear:.4f}")
print(f"‚Ä¢ Modelo log-linear: R¬≤ = {r_squared_log:.4f}")
print(f"‚Ä¢ Melhoria: {r_squared_log - r_squared_linear:.4f}")

if r_squared_log > r_squared_linear:
    print("‚Ä¢ Modelo log-linear superior, confirmando rendimentos decrescentes")
else:
    print("‚Ä¢ Modelos t√™m performance similar")

print("\n" + "="*80)
print("RESUMO EXECUTIVO")
print="="*80
print(f"(i)  EFEITO CONSTANTE vs DECRESCENTE:")
print(f"     ‚Ä¢ DECRESCENTE √© mais razo√°vel")
print(f"     ‚Ä¢ Lei dos rendimentos marginais decrescentes")
print(f"     ‚Ä¢ $1 extra vale mais em escolas carentes")
print(f"")
print(f"(ii) MODELO POPULACIONAL:")
print(f"     ‚Ä¢ math10 = Œ≤‚ÇÄ + Œ≤‚ÇÅ*log(expend) + u")
print(f"     ‚Ä¢ Œ≤‚ÇÅ/100 = mudan√ßa em math10 para 1% ‚Üë em expend")
print(f"")
print(f"(iii) ESTIMA√á√ÉO:")
print(f"     ‚Ä¢ math10 = {beta_0_log:.1f} + {beta_1_log:.1f} √ó log(expend)")
print(f"     ‚Ä¢ R¬≤ = {r_squared_log:.3f}, n = {n}")
print(f"")
print(f"(iv) INTERPRETA√á√ÉO:")
print(f"     ‚Ä¢ 1% ‚Üë gastos ‚Üí +{beta_1_log/100:.3f} pontos percentuais")
print(f"     ‚Ä¢ 10% ‚Üë gastos ‚Üí +{beta_1_log/10:.2f} pontos percentuais")
print(f"")
print(f"(v)  VALORES > 100%:")
print(f"     ‚Ä¢ N√£o preocupante - artefato de extrapola√ß√£o")
print(f"     ‚Ä¢ Modelo v√°lido apenas no range observado")
print(f"     ‚Ä¢ Foco na interpreta√ß√£o marginal, n√£o previs√µes extremas")
print(f"")
print(f"CONCLUS√ÉO: Rela√ß√£o log-linear captura melhor a realidade")
print(f"educacional com rendimentos decrescentes dos gastos.")